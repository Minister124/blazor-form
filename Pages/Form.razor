@page "/form"
@inject NavigationManager NavigationManager

<EditForm Model="@form" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="FirstName">FirstName:</label>
        <InputText id="FirstName" class="form-control" @bind-Value="form.FirstName"/>
    </div>
    <div class="form-group">
        <label for="LastName">LastName:</label>
        <InputText id="LastName" class="form-control" @bind-Value="form.LastName" />
    </div>
    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText id="Email" class="form-control" @bind-Value="form.Email" />
    </div>
    <div class="form-group">
        <label for="PhoneNumber">Phone:</label>
        <InputText id="Phone" class="form-control" @bind-Value="form.PhoneNumber" />
    </div>
    <div class="form-group">
        <label for="Address">Address:</label>
        <InputText id="Address" class="form-control" @bind-Value="form.Address" />
    </div>
    <div class="form-group">
        <label for="Hobbies">Hobbies:</label>
        <select id="Hobbies" class="form-control" multiple>
            @foreach (var hobby in hobbies)
            {
                <option value="@hobby.Id">@hobby.Name</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    public List<Hobby> hobbies = new List<Hobby>();
    Data.Models.Form form = new Data.Models.Form();
    Data.Services.FormData formData = new Data.Services.FormData();
    private List<Guid> selectedHobbies = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        // Load hobbies in the OnInitializedAsync method
        hobbies = await LoadAllHobbies();
    }

    private async Task<List<Hobby>> LoadAllHobbies()
    {
        // Retrieve hobbies from your service or repository
        return HobbySeed.RetrieveHobbiesData();
    }

    public async Task HandleSubmit()
    {
        var selectedHobbies = await JSRuntime.InvokeAsync<List<string>>("multiselect.getSelectedValues", "Hobbies");
        form.Hobbies = selectedHobbies.Select(id =>
        new Hobby
            {
                Id = Guid.Parse(id),
                Name = hobbies.FirstOrDefault(h => h.Id == Guid.Parse(id))?.Name
            }).ToList();
        await formData.SaveFormDataInJson(form, JSRuntime);
        form = new Data.Models.Form();
        NavigationManager.NavigateTo("/formData");
        //await App.Current.MainPage.DisplayAlert("Form Added", "Form Added To Json", "OK");
        await JSRuntime.InvokeVoidAsync("showNotification", "Form submitted successfully!");
    }
}
